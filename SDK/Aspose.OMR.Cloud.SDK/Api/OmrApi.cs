/*
 * Copyright (c) 2018 Aspose Pty Ltd. All Rights Reserved.
 *
 * Licensed under the MIT (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://github.com/aspose-omr-cloud/aspose-omr-cloud-dotnet/blob/master/LICENSE
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/*
 * Aspose.OMR for Cloud API Reference
 * Aspose.OMR for Cloud helps performing optical mark recognition in the cloud
 *
 * OpenAPI spec version: 1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


using System;
using System.Collections.Generic;
using Com.Aspose.Omr.Client;
using Com.Aspose.Omr.Model;

namespace Com.Aspose.Omr.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOmrApi
    {
        /// <summary>
        /// Run specific OMR task 
        /// </summary>
        /// <param name="name">Name of the file to recognize.</param>
        /// <param name="actionName">Action name [&#39;CorrectTemplate&#39;, &#39;FinalizeTemplate&#39;, &#39;RecognizeImage&#39;]</param>
        /// <param name="param">Function params, specific for each actionName</param>
        /// <param name="storage">Image&#39;s storage.</param>
        /// <param name="folder">Image&#39;s folder.</param>
        /// <returns>OMRResponse</returns>
        OMRResponse PostRunOmrTask (string name, string actionName, OMRFunctionParam param, string storage, string folder);
    }
  
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class OmrApi : IOmrApi
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OmrApi"/> class.
        /// </summary>
		/// <param name="appKey">The api key.</param>
		/// <param name="appSid">The api sid.</param>
        /// <param name="basePath">The base path.</param>
        public OmrApi(String appKey, String appSid, String basePath)
        {
            this.ApiClient = new ApiClient(appKey, appSid, basePath);
        }
    
        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <param name="basePath">The base path</param>
        /// <value>The base path</value>
        public void SetBasePath(String basePath)
        {
            this.ApiClient.BasePath = basePath;
        }
    
        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <param name="basePath">The base path</param>
        /// <value>The base path</value>
        public String GetBasePath(String basePath)
        {
            return this.ApiClient.BasePath;
        }
    
        /// <summary>
        /// Gets or sets the API client.
        /// </summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient ApiClient {get; set;}
    
        /// <summary>
        /// Run specific OMR task 
        /// </summary>
        /// <param name="name">Name of the file to recognize.</param> 
        /// <param name="actionName">Action name [&#39;CorrectTemplate&#39;, &#39;FinalizeTemplate&#39;, &#39;RecognizeImage&#39;]</param> 
        /// <param name="param">Function params, specific for each actionName</param> 
        /// <param name="storage">Image&#39;s storage.</param> 
        /// <param name="folder">Image&#39;s folder.</param> 
        /// <returns>OMRResponse</returns>            
        public OMRResponse PostRunOmrTask (string name, string actionName, OMRFunctionParam param, string storage, string folder)
        {
            
            // verify the required parameter 'name' is set
            if (name == null) throw new ApiException(400, "Missing required parameter 'name' when calling PostRunOmrTask");
            
            // verify the required parameter 'actionName' is set
            if (actionName == null) throw new ApiException(400, "Missing required parameter 'actionName' when calling PostRunOmrTask");
            
    
            var _apiPath = "/omr/{name}/runOmrTask";
            _apiPath = _apiPath.Replace("{format}", "json");
            _apiPath = _apiPath.Replace("{" + "name" + "}", ApiClient.ParameterToString(name));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (actionName != null) queryParams.Add("actionName", ApiClient.ParameterToString(actionName)); // query parameter
 if (storage != null) queryParams.Add("storage", ApiClient.ParameterToString(storage)); // query parameter
 if (folder != null) queryParams.Add("folder", ApiClient.ParameterToString(folder)); // query parameter
                                    postBody = ApiClient.Serialize(param); // http body (model) parameter
    
            // authentication setting, if any
            String[] authSettings = new String[] {  };
    
            // make the HTTP request
            RestResponse response = (RestResponse) ApiClient.CallApi(_apiPath, "POST", queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling PostRunOmrTask: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling PostRunOmrTask: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OMRResponse) ApiClient.Deserialize(response, typeof(OMRResponse), response.Headers);
        }
    
    }
}
